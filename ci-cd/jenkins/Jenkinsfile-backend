pipeline {
    agent any
    
    tools {
        maven 'Maven 3.8.6'
        jdk 'JDK 17'
    }
    
    environment {
        DOCKER_REGISTRY = credentials('docker-registry-url')
        DOCKER_CREDENTIALS = credentials('docker-credentials')
        SONARQUBE_TOKEN = credentials('sonarqube-token')
        SONARQUBE_URL = credentials('sonarqube-url')
        KUBE_CONFIG = credentials('kubernetes-config')
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Backend Build') {
            steps {
                dir('backend') {
                    sh 'mvn clean package -DskipTests'
                }
            }
        }
        
        stage('Backend Test') {
            steps {
                dir('backend') {
                    sh 'mvn test'
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Backend Code Quality') {
            steps {
                dir('backend') {
                    withSonarQubeEnv('SonarQube') {
                        sh 'mvn sonar:sonar -Dsonar.projectKey=finovabank-backend -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.login=${SONARQUBE_TOKEN}'
                    }
                }
            }
        }
        
        stage('Backend Docker Build & Push') {
            steps {
                script {
                    // Login to Docker registry
                    sh 'echo ${DOCKER_CREDENTIALS_PSW} | docker login ${DOCKER_REGISTRY} -u ${DOCKER_CREDENTIALS_USR} --password-stdin'
                    
                    // Build and push microservices
                    def services = [
                        'api-gateway',
                        'account-management',
                        'transaction-service',
                        'loan-management',
                        'savings-goals',
                        'risk-assessment',
                        'compliance',
                        'notification-service',
                        'reporting'
                    ]
                    
                    for (service in services) {
                        dir("backend/${service}") {
                            def imageTag = "${DOCKER_REGISTRY}/${service}:${env.BUILD_NUMBER}"
                            sh "docker build -t ${imageTag} ."
                            sh "docker push ${imageTag}"
                            
                            // Also tag as latest if on main branch
                            if (env.BRANCH_NAME == 'main') {
                                sh "docker tag ${imageTag} ${DOCKER_REGISTRY}/${service}:latest"
                                sh "docker push ${DOCKER_REGISTRY}/${service}:latest"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Deploy Backend to Kubernetes') {
            when {
                branch 'main'
            }
            steps {
                script {
                    // Configure kubectl
                    sh 'mkdir -p ~/.kube'
                    sh 'echo "${KUBE_CONFIG}" > ~/.kube/config'
                    
                    // Apply Kubernetes manifests
                    sh 'kubectl apply -f infrastructure/kubernetes/namespace.yaml'
                    sh 'kubectl apply -f infrastructure/kubernetes/backend-deployment.yaml'
                    sh 'kubectl apply -f infrastructure/kubernetes/backend-service.yaml'
                    
                    // Update image tags if needed
                    def services = [
                        'api-gateway',
                        'account-management',
                        'transaction-service',
                        'loan-management',
                        'savings-goals',
                        'risk-assessment',
                        'compliance',
                        'notification-service',
                        'reporting'
                    ]
                    
                    for (service in services) {
                        sh "kubectl set image deployment/${service} ${service}=${DOCKER_REGISTRY}/${service}:${env.BUILD_NUMBER} -n finovabank-backend"
                    }
                    
                    // Verify deployments
                    sh 'kubectl rollout status deployment/api-gateway -n finovabank-backend --timeout=300s'
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Backend pipeline completed successfully!'
        }
        failure {
            echo 'Backend pipeline failed!'
        }
    }
}

---
# FinovaBank Infrastructure Ansible Playbook
# Comprehensive server configuration for financial-grade infrastructure
# This playbook implements security hardening, monitoring, and compliance features

- name: FinovaBank Infrastructure Configuration
  hosts: finova_servers
  become: yes
  gather_facts: yes
  vars:
    # Application configuration
    app_user: finovaapp
    app_group: finovaapp
    app_home: /opt/finovabank
    log_dir: /var/log/finovabank
    config_dir: /etc/finovabank
    
    # Security configuration
    ssh_port: 22
    fail2ban_bantime: 3600
    fail2ban_maxretry: 3
    
    # Monitoring configuration
    cloudwatch_region: "{{ ansible_ec2_placement_region | default('us-west-2') }}"
    log_retention_days: 2555  # 7 years for financial compliance
    
    # Compliance configuration
    audit_rules_file: /etc/audit/rules.d/finovabank.rules
    
    # Docker configuration
    docker_compose_version: "2.20.2"
    
    # Services to install
    required_packages:
      - docker.io
      - docker-compose
      - fail2ban
      - aide
      - rkhunter
      - chkrootkit
      - auditd
      - rsyslog
      - logrotate
      - ntp
      - htop
      - iotop
      - net-tools
      - curl
      - wget
      - unzip
      - jq
      - awscli
      - amazon-cloudwatch-agent
      - amazon-ssm-agent
    
    # Services to remove (security hardening)
    packages_to_remove:
      - telnet
      - rsh-server
      - rsh
      - ypbind
      - ypserv
      - tftp
      - tftp-server
      - talk
      - talk-server
    
    # Services to disable
    services_to_disable:
      - postfix
      - cups
      - avahi-daemon
      - bluetooth
    
    # FinovaBank microservices
    finovabank_services:
      - name: api-gateway
        image: finova/api-gateway:latest
        port: 8080
        health_check: /health
      - name: account-service
        image: finova/account-service:latest
        port: 8081
        health_check: /health
      - name: transaction-service
        image: finova/transaction-service:latest
        port: 8082
        health_check: /health
      - name: loan-service
        image: finova/loan-service:latest
        port: 8083
        health_check: /health
      - name: savings-goals-service
        image: finova/savings-goals-service:latest
        port: 8084
        health_check: /health
      - name: risk-assessment-service
        image: finova/risk-assessment-service:latest
        port: 8085
        health_check: /health
      - name: compliance-service
        image: finova/compliance-service:latest
        port: 8086
        health_check: /health
      - name: notification-service
        image: finova/notification-service:latest
        port: 8087
        health_check: /health
      - name: reporting-service
        image: finova/reporting-service:latest
        port: 8088
        health_check: /health

  pre_tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      when: ansible_os_family == "Debian"
    
    - name: Update package cache (RHEL/CentOS)
      yum:
        update_cache: yes
      when: ansible_os_family == "RedHat"

  tasks:
    # ========================================
    # SYSTEM PREPARATION AND HARDENING
    # ========================================
    
    - name: Create application user
      user:
        name: "{{ app_user }}"
        group: "{{ app_group }}"
        home: "{{ app_home }}"
        shell: /bin/bash
        system: yes
        create_home: yes
      tags: [users, security]
    
    - name: Create application directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'
      loop:
        - "{{ app_home }}"
        - "{{ app_home }}/app"
        - "{{ app_home }}/config"
        - "{{ app_home }}/data"
        - "{{ app_home }}/logs"
        - "{{ app_home }}/scripts"
        - "{{ app_home }}/backups"
        - "{{ log_dir }}"
        - "{{ config_dir }}"
      tags: [directories, setup]
    
    - name: Install required packages
      package:
        name: "{{ required_packages }}"
        state: present
      tags: [packages, setup]
    
    - name: Remove unnecessary packages (security hardening)
      package:
        name: "{{ packages_to_remove }}"
        state: absent
      tags: [packages, security, hardening]
    
    - name: Disable unnecessary services
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      loop: "{{ services_to_disable }}"
      ignore_errors: yes
      tags: [services, security, hardening]
    
    # ========================================
    # SSH SECURITY CONFIGURATION
    # ========================================
    
    - name: Configure SSH security
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backup: yes
      loop:
        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }
        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }
        - { regexp: '^#?PubkeyAuthentication', line: 'PubkeyAuthentication yes' }
        - { regexp: '^#?Protocol', line: 'Protocol 2' }
        - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries 3' }
        - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }
        - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax 2' }
        - { regexp: '^#?LogLevel', line: 'LogLevel VERBOSE' }
        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }
        - { regexp: '^#?AllowTcpForwarding', line: 'AllowTcpForwarding yes' }
      notify: restart sshd
      tags: [ssh, security, hardening]
    
    - name: Add SSH allowed users
      lineinfile:
        path: /etc/ssh/sshd_config
        line: "AllowUsers ubuntu {{ app_user }}"
        backup: yes
      notify: restart sshd
      tags: [ssh, security]
    
    # ========================================
    # FIREWALL CONFIGURATION
    # ========================================
    
    - name: Install and configure UFW firewall
      block:
        - name: Install UFW
          package:
            name: ufw
            state: present
        
        - name: Reset UFW to defaults
          ufw:
            state: reset
        
        - name: Configure UFW defaults
          ufw:
            direction: "{{ item.direction }}"
            policy: "{{ item.policy }}"
          loop:
            - { direction: 'incoming', policy: 'deny' }
            - { direction: 'outgoing', policy: 'allow' }
        
        - name: Allow SSH
          ufw:
            rule: allow
            port: "{{ ssh_port }}"
            proto: tcp
        
        - name: Allow application ports
          ufw:
            rule: allow
            port: "{{ item.port }}"
            proto: tcp
            src: "10.0.0.0/8"
          loop: "{{ finovabank_services }}"
        
        - name: Allow health check port
          ufw:
            rule: allow
            port: "8080"
            proto: tcp
            src: "10.0.0.0/16"
        
        - name: Enable UFW
          ufw:
            state: enabled
      when: ansible_os_family == "Debian"
      tags: [firewall, security]
    
    # ========================================
    # FAIL2BAN CONFIGURATION
    # ========================================
    
    - name: Configure fail2ban
      block:
        - name: Create fail2ban local configuration
          copy:
            content: |
              [DEFAULT]
              bantime = {{ fail2ban_bantime }}
              findtime = 600
              maxretry = {{ fail2ban_maxretry }}
              backend = systemd
              destemail = security@finovabank.com
              sendername = FinovaBank-Security
              
              [sshd]
              enabled = true
              port = ssh
              logpath = /var/log/auth.log
              maxretry = {{ fail2ban_maxretry }}
              bantime = {{ fail2ban_bantime }}
              
              [sshd-ddos]
              enabled = true
              port = ssh
              logpath = /var/log/auth.log
              maxretry = 6
              bantime = {{ fail2ban_bantime }}
              findtime = 120
              
              [recidive]
              enabled = true
              logpath = /var/log/fail2ban.log
              banaction = iptables-allports
              bantime = 86400
              findtime = 86400
              maxretry = 3
            dest: /etc/fail2ban/jail.local
            backup: yes
          notify: restart fail2ban
        
        - name: Start and enable fail2ban
          systemd:
            name: fail2ban
            state: started
            enabled: yes
      tags: [fail2ban, security]
    
    # ========================================
    # AUDIT CONFIGURATION
    # ========================================
    
    - name: Configure audit logging
      block:
        - name: Create audit rules for FinovaBank
          copy:
            content: |
              # FinovaBank Audit Rules for Financial Compliance
              
              # Remove any existing rules
              -D
              
              # Buffer size
              -b 8192
              
              # Failure mode (0=silent, 1=printk, 2=panic)
              -f 1
              
              # Monitor file access
              -w /etc/passwd -p wa -k identity
              -w /etc/group -p wa -k identity
              -w /etc/shadow -p wa -k identity
              -w /etc/sudoers -p wa -k identity
              -w /etc/sudoers.d/ -p wa -k identity
              
              # Monitor authentication events
              -w /var/log/faillog -p wa -k logins
              -w /var/log/lastlog -p wa -k logins
              -w /var/log/wtmp -p wa -k logins
              -w /var/log/btmp -p wa -k logins
              
              # Monitor network configuration
              -w /etc/hosts -p wa -k network
              -w /etc/network/ -p wa -k network
              
              # Monitor system administration
              -w /var/log/sudo.log -p wa -k actions
              -w {{ app_home }}/config/ -p wa -k app_config
              -w {{ config_dir }}/ -p wa -k app_config
              
              # Monitor file system mounts
              -a always,exit -F arch=b64 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
              -a always,exit -F arch=b32 -S mount -F auid>=1000 -F auid!=4294967295 -k mounts
              
              # Monitor file deletions
              -a always,exit -F arch=b64 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
              -a always,exit -F arch=b32 -S unlink -S unlinkat -S rename -S renameat -F auid>=1000 -F auid!=4294967295 -k delete
              
              # Monitor privilege escalation
              -w /bin/su -p x -k priv_esc
              -w /usr/bin/sudo -p x -k priv_esc
              
              # Monitor system calls
              -a always,exit -F arch=b64 -S adjtimex -S settimeofday -k time-change
              -a always,exit -F arch=b32 -S adjtimex -S settimeofday -S stime -k time-change
              
              # Monitor Docker
              -w /usr/bin/docker -p x -k docker
              -w /var/lib/docker/ -p wa -k docker
              
              # Monitor application files
              -w {{ app_home }}/ -p wa -k finovabank_app
              -w {{ log_dir }}/ -p wa -k finovabank_logs
              
              # Make the configuration immutable
              -e 2
            dest: "{{ audit_rules_file }}"
            backup: yes
          notify: restart auditd
        
        - name: Start and enable auditd
          systemd:
            name: auditd
            state: started
            enabled: yes
      tags: [audit, security, compliance]
    
    # ========================================
    # SYSTEM HARDENING
    # ========================================
    
    - name: Apply kernel security parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        # Network security
        - { name: 'net.ipv4.conf.all.send_redirects', value: '0' }
        - { name: 'net.ipv4.conf.default.send_redirects', value: '0' }
        - { name: 'net.ipv4.conf.all.accept_redirects', value: '0' }
        - { name: 'net.ipv4.conf.default.accept_redirects', value: '0' }
        - { name: 'net.ipv4.conf.all.accept_source_route', value: '0' }
        - { name: 'net.ipv4.conf.default.accept_source_route', value: '0' }
        - { name: 'net.ipv4.conf.all.log_martians', value: '1' }
        - { name: 'net.ipv4.conf.default.log_martians', value: '1' }
        - { name: 'net.ipv4.icmp_echo_ignore_broadcasts', value: '1' }
        - { name: 'net.ipv4.icmp_ignore_bogus_error_responses', value: '1' }
        - { name: 'net.ipv4.tcp_syncookies', value: '1' }
        - { name: 'net.ipv4.conf.all.rp_filter', value: '1' }
        - { name: 'net.ipv4.conf.default.rp_filter', value: '1' }
        # Memory management
        - { name: 'vm.swappiness', value: '10' }
        - { name: 'vm.dirty_ratio', value: '15' }
        - { name: 'vm.dirty_background_ratio', value: '5' }
        # File system
        - { name: 'fs.file-max', value: '2097152' }
        - { name: 'fs.suid_dumpable', value: '0' }
        # Process limits
        - { name: 'kernel.pid_max', value: '4194304' }
        - { name: 'kernel.dmesg_restrict', value: '1' }
        - { name: 'kernel.kptr_restrict', value: '2' }
      tags: [hardening, security, kernel]
    
    - name: Configure system limits
      pam_limits:
        domain: "{{ app_user }}"
        limit_type: "{{ item.type }}"
        limit_item: "{{ item.item }}"
        value: "{{ item.value }}"
      loop:
        - { type: 'soft', item: 'nofile', value: '65536' }
        - { type: 'hard', item: 'nofile', value: '65536' }
        - { type: 'soft', item: 'nproc', value: '32768' }
        - { type: 'hard', item: 'nproc', value: '32768' }
        - { type: 'hard', item: 'core', value: '0' }
      tags: [limits, hardening]
    
    - name: Set proper file permissions
      file:
        path: "{{ item.path }}"
        mode: "{{ item.mode }}"
        owner: "{{ item.owner | default('root') }}"
        group: "{{ item.group | default('root') }}"
      loop:
        - { path: '/etc/ssh/sshd_config', mode: '0600' }
        - { path: '/etc/shadow', mode: '0600' }
        - { path: '/etc/passwd', mode: '0644' }
        - { path: '/etc/group', mode: '0644' }
        - { path: '/root', mode: '0700' }
      tags: [permissions, security, hardening]
    
    # ========================================
    # DOCKER CONFIGURATION
    # ========================================
    
    - name: Configure Docker
      block:
        - name: Add application user to docker group
          user:
            name: "{{ app_user }}"
            groups: docker
            append: yes
        
        - name: Create Docker daemon configuration
          copy:
            content: |
              {
                "log-driver": "json-file",
                "log-opts": {
                  "max-size": "10m",
                  "max-file": "3"
                },
                "storage-driver": "overlay2",
                "live-restore": true,
                "userland-proxy": false,
                "no-new-privileges": true,
                "seccomp-profile": "/etc/docker/seccomp.json",
                "default-ulimits": {
                  "nofile": {
                    "Name": "nofile",
                    "Hard": 65536,
                    "Soft": 65536
                  }
                }
              }
            dest: /etc/docker/daemon.json
            backup: yes
          notify: restart docker
        
        - name: Start and enable Docker
          systemd:
            name: docker
            state: started
            enabled: yes
        
        - name: Install Docker Compose
          get_url:
            url: "https://github.com/docker/compose/releases/download/v{{ docker_compose_version }}/docker-compose-linux-x86_64"
            dest: /usr/local/bin/docker-compose
            mode: '0755'
            owner: root
            group: root
      tags: [docker, setup]
    
    # ========================================
    # LOGGING CONFIGURATION
    # ========================================
    
    - name: Configure rsyslog for application logging
      copy:
        content: |
          # FinovaBank application logging configuration
          $template FinovaBankFormat,"%timestamp:::date-rfc3339% %HOSTNAME% %syslogtag% %msg%\n"
          
          # Application logs
          local0.*    {{ log_dir }}/application.log;FinovaBankFormat
          local1.*    {{ log_dir }}/security.log;FinovaBankFormat
          local2.*    {{ log_dir }}/audit.log;FinovaBankFormat
          local3.*    {{ log_dir }}/performance.log;FinovaBankFormat
          local4.*    {{ log_dir }}/compliance.log;FinovaBankFormat
          
          # Stop processing after writing to files
          local0.*    stop
          local1.*    stop
          local2.*    stop
          local3.*    stop
          local4.*    stop
        dest: /etc/rsyslog.d/finovabank.conf
        backup: yes
      notify: restart rsyslog
      tags: [logging, setup]
    
    - name: Configure log rotation
      copy:
        content: |
          {{ log_dir }}/*.log {
              daily
              missingok
              rotate 365
              compress
              delaycompress
              notifempty
              create 644 {{ app_user }} {{ app_group }}
              postrotate
                  systemctl reload rsyslog > /dev/null 2>&1 || true
              endscript
          }
          
          /var/log/audit/audit.log {
              daily
              missingok
              rotate {{ log_retention_days }}
              compress
              delaycompress
              notifempty
              create 600 root root
              postrotate
                  service auditd restart > /dev/null 2>&1 || true
              endscript
          }
        dest: /etc/logrotate.d/finovabank
        backup: yes
      tags: [logging, setup]
    
    # ========================================
    # MONITORING SETUP
    # ========================================
    
    - name: Configure CloudWatch agent
      block:
        - name: Create CloudWatch agent configuration
          copy:
            content: |
              {
                  "agent": {
                      "metrics_collection_interval": 60,
                      "run_as_user": "cwagent"
                  },
                  "logs": {
                      "logs_collected": {
                          "files": {
                              "collect_list": [
                                  {
                                      "file_path": "{{ log_dir }}/application.log",
                                      "log_group_name": "/aws/ec2/finovabank/application",
                                      "log_stream_name": "{instance_id}/application",
                                      "timezone": "UTC"
                                  },
                                  {
                                      "file_path": "{{ log_dir }}/security.log",
                                      "log_group_name": "/aws/ec2/finovabank/security",
                                      "log_stream_name": "{instance_id}/security",
                                      "timezone": "UTC"
                                  },
                                  {
                                      "file_path": "{{ log_dir }}/audit.log",
                                      "log_group_name": "/aws/ec2/finovabank/audit",
                                      "log_stream_name": "{instance_id}/audit",
                                      "timezone": "UTC"
                                  },
                                  {
                                      "file_path": "/var/log/auth.log",
                                      "log_group_name": "/aws/ec2/finovabank/auth",
                                      "log_stream_name": "{instance_id}/auth",
                                      "timezone": "UTC"
                                  },
                                  {
                                      "file_path": "/var/log/fail2ban.log",
                                      "log_group_name": "/aws/ec2/finovabank/fail2ban",
                                      "log_stream_name": "{instance_id}/fail2ban",
                                      "timezone": "UTC"
                                  }
                              ]
                          }
                      }
                  },
                  "metrics": {
                      "namespace": "FinovaBank/EC2",
                      "metrics_collected": {
                          "cpu": {
                              "measurement": [
                                  "cpu_usage_idle",
                                  "cpu_usage_iowait",
                                  "cpu_usage_user",
                                  "cpu_usage_system"
                              ],
                              "metrics_collection_interval": 60,
                              "totalcpu": false
                          },
                          "disk": {
                              "measurement": [
                                  "used_percent"
                              ],
                              "metrics_collection_interval": 60,
                              "resources": [
                                  "*"
                              ]
                          },
                          "diskio": {
                              "measurement": [
                                  "io_time"
                              ],
                              "metrics_collection_interval": 60,
                              "resources": [
                                  "*"
                              ]
                          },
                          "mem": {
                              "measurement": [
                                  "mem_used_percent"
                              ],
                              "metrics_collection_interval": 60
                          },
                          "netstat": {
                              "measurement": [
                                  "tcp_established",
                                  "tcp_time_wait"
                              ],
                              "metrics_collection_interval": 60
                          },
                          "swap": {
                              "measurement": [
                                  "swap_used_percent"
                              ],
                              "metrics_collection_interval": 60
                          }
                      }
                  }
              }
            dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
            backup: yes
        
        - name: Start CloudWatch agent
          shell: |
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
                -a fetch-config \
                -m ec2 \
                -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
                -s
          changed_when: false
      tags: [monitoring, cloudwatch]
    
    # ========================================
    # APPLICATION DEPLOYMENT
    # ========================================
    
    - name: Create Docker Compose configuration
      copy:
        content: |
          version: '3.8'
          
          services:
          {% for service in finovabank_services %}
            {{ service.name }}:
              image: {{ service.image }}
              container_name: finovabank-{{ service.name }}
              restart: unless-stopped
              ports:
                - "{{ service.port }}:{{ service.port }}"
              environment:
                - ENVIRONMENT=production
                - LOG_LEVEL=info
                - SERVICE_NAME={{ service.name }}
                - SERVICE_PORT={{ service.port }}
              volumes:
                - {{ app_home }}/config:/app/config:ro
                - {{ log_dir }}:/app/logs
                - {{ app_home }}/data:/app/data
              networks:
                - finovabank
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:{{ service.port }}{{ service.health_check }}"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              security_opt:
                - no-new-privileges:true
              read_only: true
              tmpfs:
                - /tmp
                - /var/tmp
              user: "1000:1000"
              cap_drop:
                - ALL
              cap_add:
                - NET_BIND_SERVICE
          {% endfor %}
          
          networks:
            finovabank:
              driver: bridge
              ipam:
                config:
                  - subnet: 172.20.0.0/16
        dest: "{{ app_home }}/docker-compose.yml"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0644'
      tags: [docker, deployment]
    
    - name: Create application configuration files
      copy:
        content: |
          # FinovaBank Application Configuration
          
          # Database Configuration
          DB_HOST={{ ansible_default_ipv4.address }}
          DB_PORT=3306
          DB_NAME=finovabank
          DB_USER=finovadmin
          
          # Redis Configuration
          REDIS_HOST={{ ansible_default_ipv4.address }}
          REDIS_PORT=6379
          
          # Security Configuration
          JWT_SECRET_KEY=change_this_in_production
          ENCRYPTION_KEY=change_this_in_production
          
          # Logging Configuration
          LOG_LEVEL=info
          LOG_FORMAT=json
          
          # Monitoring Configuration
          METRICS_ENABLED=true
          HEALTH_CHECK_ENABLED=true
          
          # Compliance Configuration
          AUDIT_ENABLED=true
          COMPLIANCE_MODE=strict
          
          # Performance Configuration
          MAX_CONNECTIONS=100
          CONNECTION_TIMEOUT=30
          REQUEST_TIMEOUT=60
        dest: "{{ app_home }}/config/app.env"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0600'
      tags: [configuration, deployment]
    
    # ========================================
    # BACKUP AND MAINTENANCE SCRIPTS
    # ========================================
    
    - name: Create backup script
      copy:
        content: |
          #!/bin/bash
          # FinovaBank backup script
          
          set -e
          
          BACKUP_DIR="{{ app_home }}/backups"
          DATE=$(date +%Y%m%d_%H%M%S)
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null || echo "unknown")
          
          mkdir -p "$BACKUP_DIR"
          
          # Backup application configuration
          tar -czf "$BACKUP_DIR/config_${INSTANCE_ID}_${DATE}.tar.gz" -C {{ app_home }} config/
          
          # Backup application logs
          tar -czf "$BACKUP_DIR/logs_${INSTANCE_ID}_${DATE}.tar.gz" -C {{ log_dir }} .
          
          # Backup application data
          if [ -d "{{ app_home }}/data" ]; then
              tar -czf "$BACKUP_DIR/data_${INSTANCE_ID}_${DATE}.tar.gz" -C {{ app_home }} data/
          fi
          
          # Clean up old backups (keep last 7 days)
          find "$BACKUP_DIR" -name "*.tar.gz" -mtime +7 -delete
          
          echo "Backup completed: $DATE"
          logger -p local2.info "FinovaBank backup completed: $DATE"
        dest: "{{ app_home }}/scripts/backup.sh"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'
      tags: [backup, scripts]
    
    - name: Create monitoring script
      copy:
        content: |
          #!/bin/bash
          # FinovaBank monitoring script
          
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null || echo "unknown")
          
          # Function to send metric to CloudWatch
          send_metric() {
              local metric_name="$1"
              local value="$2"
              local unit="$3"
              
              aws cloudwatch put-metric-data \
                  --namespace "FinovaBank/Application" \
                  --metric-data MetricName="$metric_name",Value="$value",Unit="$unit",Dimensions=InstanceId="$INSTANCE_ID" \
                  --region "{{ cloudwatch_region }}" 2>/dev/null || true
          }
          
          # Monitor Docker containers
          {% for service in finovabank_services %}
          if docker ps | grep -q "finovabank-{{ service.name }}"; then
              send_metric "{{ service.name | title }}Health" 1 "Count"
              
              # Check health endpoint
              if curl -f http://localhost:{{ service.port }}{{ service.health_check }} > /dev/null 2>&1; then
                  send_metric "{{ service.name | title }}HealthCheck" 1 "Count"
              else
                  send_metric "{{ service.name | title }}HealthCheck" 0 "Count"
              fi
          else
              send_metric "{{ service.name | title }}Health" 0 "Count"
              send_metric "{{ service.name | title }}HealthCheck" 0 "Count"
          fi
          {% endfor %}
          
          # Monitor system resources
          DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
          send_metric "DiskUsage" "$DISK_USAGE" "Percent"
          
          MEM_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
          send_metric "MemoryUsage" "$MEM_USAGE" "Percent"
          
          LOAD_AVG=$(uptime | awk -F'load average:' '{print $2}' | awk '{print $1}' | sed 's/,//')
          send_metric "LoadAverage" "$LOAD_AVG" "None"
          
          # Monitor active connections
          CONNECTIONS=$(netstat -an | grep :8080 | grep ESTABLISHED | wc -l)
          send_metric "ActiveConnections" "$CONNECTIONS" "Count"
        dest: "{{ app_home }}/scripts/monitor.sh"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'
      tags: [monitoring, scripts]
    
    - name: Create health check script
      copy:
        content: |
          #!/bin/bash
          # FinovaBank health check script
          
          # Check system load
          LOAD=$(uptime | awk '{print $10}' | sed 's/,//')
          LOAD_THRESHOLD=2.0
          
          # Check disk space
          DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
          DISK_THRESHOLD=90
          
          # Check memory usage
          MEM_USAGE=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
          MEM_THRESHOLD=90
          
          # Check Docker daemon
          DOCKER_STATUS=$(systemctl is-active docker)
          
          # Health check logic
          if (( $(echo "$LOAD > $LOAD_THRESHOLD" | bc -l) )); then
              echo "UNHEALTHY: High system load ($LOAD)"
              exit 1
          elif [ "$DISK_USAGE" -gt "$DISK_THRESHOLD" ]; then
              echo "UNHEALTHY: High disk usage ($DISK_USAGE%)"
              exit 1
          elif [ "$MEM_USAGE" -gt "$MEM_THRESHOLD" ]; then
              echo "UNHEALTHY: High memory usage ($MEM_USAGE%)"
              exit 1
          elif [ "$DOCKER_STATUS" != "active" ]; then
              echo "UNHEALTHY: Docker service not running"
              exit 1
          else
              echo "HEALTHY: All systems operational"
              exit 0
          fi
        dest: "{{ app_home }}/scripts/health-check.sh"
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: '0755'
      tags: [health, scripts]
    
    # ========================================
    # CRON JOBS AND SCHEDULED TASKS
    # ========================================
    
    - name: Schedule backup job
      cron:
        name: "FinovaBank daily backup"
        minute: "0"
        hour: "1"
        job: "{{ app_home }}/scripts/backup.sh"
        user: "{{ app_user }}"
      tags: [cron, backup]
    
    - name: Schedule monitoring job
      cron:
        name: "FinovaBank monitoring"
        minute: "*/5"
        job: "{{ app_home }}/scripts/monitor.sh"
        user: "{{ app_user }}"
      tags: [cron, monitoring]
    
    - name: Schedule AIDE integrity check
      cron:
        name: "AIDE integrity check"
        minute: "0"
        hour: "2"
        job: "/usr/bin/aide --check"
        user: root
      tags: [cron, security]
    
    - name: Schedule log cleanup
      cron:
        name: "Clean old logs"
        minute: "0"
        hour: "3"
        job: "find {{ log_dir }} -name '*.log.*' -mtime +30 -delete"
        user: "{{ app_user }}"
      tags: [cron, cleanup]
    
    # ========================================
    # COMPLIANCE AND SECURITY CHECKS
    # ========================================
    
    - name: Initialize AIDE database
      command: aide --init
      args:
        creates: /var/lib/aide/aide.db.new.gz
      tags: [aide, security]
    
    - name: Move AIDE database
      command: mv /var/lib/aide/aide.db.new.gz /var/lib/aide/aide.db.gz
      args:
        creates: /var/lib/aide/aide.db.gz
      tags: [aide, security]
    
    - name: Run rkhunter update
      command: rkhunter --update
      changed_when: false
      tags: [rkhunter, security]
    
    - name: Run initial rkhunter check
      command: rkhunter --check --skip-keypress
      changed_when: false
      ignore_errors: yes
      tags: [rkhunter, security]
    
    # ========================================
    # APPLICATION STARTUP
    # ========================================
    
    - name: Pull Docker images
      docker_image:
        name: "{{ item.image }}"
        source: pull
      loop: "{{ finovabank_services }}"
      become_user: "{{ app_user }}"
      tags: [docker, deployment]
    
    - name: Start FinovaBank services
      docker_compose:
        project_src: "{{ app_home }}"
        state: present
      become_user: "{{ app_user }}"
      tags: [docker, deployment, startup]
    
    # ========================================
    # FINAL VERIFICATION
    # ========================================
    
    - name: Wait for services to start
      wait_for:
        port: "{{ item.port }}"
        host: "{{ ansible_default_ipv4.address }}"
        delay: 10
        timeout: 60
      loop: "{{ finovabank_services }}"
      tags: [verification, startup]
    
    - name: Verify service health
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ item.port }}{{ item.health_check }}"
        method: GET
        status_code: 200
      loop: "{{ finovabank_services }}"
      retries: 3
      delay: 10
      tags: [verification, health]

  handlers:
    - name: restart sshd
      systemd:
        name: sshd
        state: restarted
    
    - name: restart fail2ban
      systemd:
        name: fail2ban
        state: restarted
    
    - name: restart auditd
      systemd:
        name: auditd
        state: restarted
    
    - name: restart rsyslog
      systemd:
        name: rsyslog
        state: restarted
    
    - name: restart docker
      systemd:
        name: docker
        state: restarted

  post_tasks:
    - name: Display deployment summary
      debug:
        msg: |
          FinovaBank infrastructure deployment completed successfully!
          
          Services deployed:
          {% for service in finovabank_services %}
          - {{ service.name }}: http://{{ ansible_default_ipv4.address }}:{{ service.port }}{{ service.health_check }}
          {% endfor %}
          
          Security features enabled:
          - SSH hardening
          - Firewall (UFW)
          - Fail2ban intrusion prevention
          - Audit logging
          - File integrity monitoring (AIDE)
          - Rootkit detection (rkhunter)
          
          Monitoring configured:
          - CloudWatch agent
          - Custom metrics
          - Log aggregation
          - Health checks
          
          Compliance features:
          - Audit trails
          - Log retention ({{ log_retention_days }} days)
          - Backup automation
          - Security hardening
      tags: [summary]


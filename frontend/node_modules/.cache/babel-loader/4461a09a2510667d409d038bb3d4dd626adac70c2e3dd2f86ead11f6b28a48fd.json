{"ast":null,"code":"// src/services/AuthService.js\nimport API from'./API';const AuthService={login:async(email,password)=>{try{const response=await API.post('/auth/login',{email,password});if(response.data.token){localStorage.setItem('user',JSON.stringify(response.data));}return response.data;}catch(error){var _error$response,_error$response$data;throw new Error(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Login failed');}},register:async(email,password)=>{try{const response=await API.post('/auth/register',{email,password});return response.data;}catch(error){var _error$response2,_error$response2$data;throw new Error(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Registration failed');}},logout:()=>{localStorage.removeItem('user');},getCurrentUser:()=>{return JSON.parse(localStorage.getItem('user'));}};export default AuthService;","map":{"version":3,"names":["API","AuthService","login","email","password","response","post","data","token","localStorage","setItem","JSON","stringify","error","_error$response","_error$response$data","Error","message","register","_error$response2","_error$response2$data","logout","removeItem","getCurrentUser","parse","getItem"],"sources":["/mnt/c/Users/36202/OneDrive/Desktop/FinovaBank/frontend/src/services/AuthService.js"],"sourcesContent":["// src/services/AuthService.js\n\nimport API from './API';\n\nconst AuthService = {\n  login: async (email, password) => {\n    try {\n      const response = await API.post('/auth/login', {\n        email,\n        password,\n      });\n      if (response.data.token) {\n        localStorage.setItem('user', JSON.stringify(response.data));\n      }\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Login failed');\n    }\n  },\n\n  register: async (email, password) => {\n    try {\n      const response = await API.post('/auth/register', {\n        email,\n        password,\n      });\n      return response.data;\n    } catch (error) {\n      throw new Error(error.response?.data?.message || 'Registration failed');\n    }\n  },\n\n  logout: () => {\n    localStorage.removeItem('user');\n  },\n\n  getCurrentUser: () => {\n    return JSON.parse(localStorage.getItem('user'));\n  },\n};\n\nexport default AuthService;\n"],"mappings":"AAAA;AAEA,MAAO,CAAAA,GAAG,KAAM,OAAO,CAEvB,KAAM,CAAAC,WAAW,CAAG,CAClBC,KAAK,CAAE,KAAAA,CAAOC,KAAK,CAAEC,QAAQ,GAAK,CAChC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,GAAG,CAACM,IAAI,CAAC,aAAa,CAAE,CAC7CH,KAAK,CACLC,QACF,CAAC,CAAC,CACF,GAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAE,CACvBC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACE,IAAI,CAAC,CAAC,CAC7D,CACA,MAAO,CAAAF,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOM,KAAK,CAAE,KAAAC,eAAA,CAAAC,oBAAA,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,EAAAF,eAAA,CAAAD,KAAK,CAACR,QAAQ,UAAAS,eAAA,kBAAAC,oBAAA,CAAdD,eAAA,CAAgBP,IAAI,UAAAQ,oBAAA,iBAApBA,oBAAA,CAAsBE,OAAO,GAAI,cAAc,CAAC,CAClE,CACF,CAAC,CAEDC,QAAQ,CAAE,KAAAA,CAAOf,KAAK,CAAEC,QAAQ,GAAK,CACnC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAL,GAAG,CAACM,IAAI,CAAC,gBAAgB,CAAE,CAChDH,KAAK,CACLC,QACF,CAAC,CAAC,CACF,MAAO,CAAAC,QAAQ,CAACE,IAAI,CACtB,CAAE,MAAOM,KAAK,CAAE,KAAAM,gBAAA,CAAAC,qBAAA,CACd,KAAM,IAAI,CAAAJ,KAAK,CAAC,EAAAG,gBAAA,CAAAN,KAAK,CAACR,QAAQ,UAAAc,gBAAA,kBAAAC,qBAAA,CAAdD,gBAAA,CAAgBZ,IAAI,UAAAa,qBAAA,iBAApBA,qBAAA,CAAsBH,OAAO,GAAI,qBAAqB,CAAC,CACzE,CACF,CAAC,CAEDI,MAAM,CAAEA,CAAA,GAAM,CACZZ,YAAY,CAACa,UAAU,CAAC,MAAM,CAAC,CACjC,CAAC,CAEDC,cAAc,CAAEA,CAAA,GAAM,CACpB,MAAO,CAAAZ,IAAI,CAACa,KAAK,CAACf,YAAY,CAACgB,OAAO,CAAC,MAAM,CAAC,CAAC,CACjD,CACF,CAAC,CAED,cAAe,CAAAxB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}